{"version":3,"sources":["Imprimir.js","Componente01.js","App.js","serviceWorker.js","index.js"],"names":["ComponentToPrint","props","usuarios","this","console","log","saida","map","u","className","id","nome","email","aa","bb","cc","React","Component","Example","ref","el","componentRef","trigger","content","App","Componente01","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0PAGMA,E,kDACF,WAAYC,GAAQ,uCACVA,G,qDAGA,IAEEC,EAAaC,KAAKF,MAAlBC,SAERE,QAAQC,IAAIH,GAEZ,IAAMI,EAAQJ,EAASK,KAAI,SAAAC,GACvB,OAEI,yBAAMC,UAAU,SACZ,6BAAMD,EAAEE,IACR,6BAAMF,EAAEG,MACR,6BAAMH,EAAEI,WAKpB,OACI,+BACI,2BAAOH,UAAU,SACb,wCACA,wCACA,yCAEJ,+BACI,4BACI,4BAAKN,KAAKF,MAAMY,IAChB,4BAAKV,KAAKF,MAAMa,IAChB,4BAAKX,KAAKF,MAAMc,KAEpB,4BACI,sCACA,sCACA,uCAEJ,4BACI,sCACA,sCACA,uCAGxBT,Q,GA9C+BU,IAAMC,WCA/BjB,GDsDgBgB,IAAMC,U,kDCrDxB,WAAYhB,GAAQ,uCACVA,G,qDAGA,IAEEC,EAAaC,KAAKF,MAAlBC,SAER,OACI,6BACI,yBAAKO,UAAU,SACP,yBAAKA,UAAU,SAAf,aACA,yBAAKA,UAAU,SAAf,QACA,yBAAKA,UAAU,SAAf,UAEXP,EAASK,KAAI,SAAAC,GACV,OAEI,yBAAKC,UAAU,SACX,yBAAKA,UAAU,SAASD,EAAEE,IAC1B,yBAAKD,UAAU,SAASD,EAAEG,MAC1B,yBAAKF,UAAU,SAASD,EAAEI,gB,GAtBnBI,IAAMC,YAuDtBC,E,kDAtBX,WAAYjB,GAAQ,uCACVA,G,qDAIA,IAAD,OAEGC,EAAaC,KAAKF,MAAlBC,SAER,OACI,6BACI,kBAAC,EAAD,CAAkBW,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKb,SAAUA,EAAUiB,IAAK,SAAAC,GAAE,OAAK,EAAKC,aAAeD,KAC9F,4BACA,kBAAC,IAAD,CACIE,QAAS,kBAAM,6CACfC,QAAS,kBAAM,EAAKF,qB,GAjBlBL,IAAMC,W,MCPbO,MApBf,WAaE,OACE,yBAAKf,UAAU,aACb,kBAACgB,EAAD,CAAcvB,SAbD,CACf,CAAEQ,GAAI,EAAGC,KAAM,UAAWC,MAAO,qBACjC,CAAEF,GAAI,EAAGC,KAAM,QAASC,MAAO,mBAC/B,CAAEF,GAAI,EAAGC,KAAM,QAASC,MAAO,mBAC/B,CAAEF,GAAI,EAAGC,KAAM,UAAWC,MAAO,qBACjC,CAAEF,GAAI,EAAGC,KAAM,UAAWC,MAAO,qBACjC,CAAEF,GAAI,EAAGC,KAAM,OAAQC,MAAO,kBAC9B,CAAEF,GAAI,EAAGC,KAAM,SAAUC,MAAO,yBCJhBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,a","file":"static/js/main.8c018674.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactToPrint from \"react-to-print\";\r\n\r\nclass ComponentToPrint extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n    render() {\r\n\r\n        const { usuarios } = this.props\r\n\r\n        console.log(usuarios)\r\n\r\n        const saida = usuarios.map(u => {\r\n            return (\r\n\r\n                <div  className=\"fundo\">\r\n                    <div>{u.id}</div>\r\n                    <div>{u.nome}</div>\r\n                    <div>{u.email}</div>\r\n                </div>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <table>\r\n                <thead className=\"fundo\">\r\n                    <th>column 1</th>\r\n                    <th>column 2</th>\r\n                    <th>column 3</th>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>{this.props.aa}</td>\r\n                        <td>{this.props.bb}</td>\r\n                        <td>{this.props.cc}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>data 1</td>\r\n                        <td>data 2</td>\r\n                        <td>data 3</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>data 1</td>\r\n                        <td>data 2</td>\r\n                        <td>data 3</td>\r\n                    </tr>\r\n                    {\r\nsaida\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nclass Example extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const { usuarios } = this.props\r\n\r\n        console.log('ei ', usuarios)\r\n\r\n        return (\r\n            <div>\r\n                <ReactToPrint\r\n                    trigger={() => <a href=\"#\">Print this out!</a>}\r\n                    content={() => this.componentRef}\r\n                />\r\n                <ComponentToPrint aa=\"aa\" bb=\"bb\" cc=\"cc\" usuarios={usuarios} ref={el => (this.componentRef = el)} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example;","import React from \"react\";\r\nimport ReactToPrint from \"react-to-print\";\r\n\r\nclass ComponentToPrint extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n    render() {\r\n\r\n        const { usuarios } = this.props\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"div10\">\r\n                        <div className=\"div11\">CÃ³digo</div>\r\n                        <div className=\"div12\">Nome</div>\r\n                        <div className=\"div13\">Email</div>\r\n                    </div>\r\n            {usuarios.map(u => {\r\n                return (\r\n    \r\n                    <div className=\"div20\">\r\n                        <div className=\"div21\">{u.id}</div>\r\n                        <div className=\"div22\">{u.nome}</div>\r\n                        <div className=\"div23\">{u.email}</div>\r\n                    </div>\r\n                )\r\n            })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Example extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const { usuarios } = this.props\r\n\r\n        return (\r\n            <div>\r\n                <ComponentToPrint aa=\"aa\" bb=\"bb\" cc=\"cc\" usuarios={usuarios} ref={el => (this.componentRef = el)} />\r\n                <p></p>\r\n                <ReactToPrint\r\n                    trigger={() => <button>Imprimir</button>}\r\n                    content={() => this.componentRef}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example;","import React from \"react\";\nimport Imprimir from \"./Imprimir\";\nimport Componente01 from \"./Componente01\";\n\n\nimport './App.css';\n\nfunction App() {\n\n  const usuarios = [\n    { id: 1, nome: 'amilton', email: 'amilton@gmail.com' },\n    { id: 2, nome: 'maria', email: 'maria@gmail.com' },\n    { id: 3, nome: 'pedro', email: 'pedro@gmail.com' },\n    { id: 5, nome: 'joaquim', email: 'joaquim@gmail.com' },\n    { id: 6, nome: 'antonia', email: 'antonia@gmail.com' },\n    { id: 7, nome: 'elis', email: 'elis@gmail.com' },\n    { id: 8, nome: 'madona', email: 'madona@gmail.com' },\n  ]\n\n\n  return (\n    <div className=\"container\">\n      <Componente01 usuarios = {usuarios} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}